package com.example.shoppingcart

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.shoppingcart.ui.theme.ShoppingCartTheme
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            ShoppingCartTheme {

                val snackbarHostState = remember { SnackbarHostState() }
                // enabling the following notification

                Scaffold(modifier = Modifier.fillMaxSize(),
                    snackbarHost = { SnackbarHost(snackbarHostState) }) { innerPadding ->
                    // enables popup notification after pressing purchase button
                    ShoppingCart(
                        modifier = Modifier.padding(innerPadding), snackbarHostState
                    )
                }
            }
        }
    }
}

// creates a ui element consisting of the below information
// every cart should have name, price, and quantity
@Composable
fun Item(modifier: Modifier = Modifier, itemName: String, info: Triple<String, Double, Int>) {
    Row(modifier = modifier,
        verticalAlignment = Alignment.CenterVertically) {
        Spacer(modifier = Modifier.padding(horizontal = 5.dp))
        Text(info.first,
            fontSize = 80.sp)
        Spacer(modifier = Modifier.padding(horizontal = 10.dp))
        Column () { // displays all information regarding the item
            Text(text=itemName,
                fontWeight = FontWeight.ExtraBold)
            Text("$" + info.second)
            Text("Quantity: " + info.third)
        }
    }
}



@Composable
fun Checkout(modifier: Modifier = Modifier, totalPrice: Double, snackbarHostState: SnackbarHostState) {
    val scope = rememberCoroutineScope()
    val roundedPrice = String.format("%.2f", totalPrice)

    Button(modifier = modifier
        .fillMaxWidth(.9f), onClick = {
        scope.launch { // launches a coroutine which opens the following snackbar
            snackbarHostState.showSnackbar("Ordered")
        }
    }) { Text("Checkout ($$roundedPrice)") }
}


@Composable
fun ShoppingCart(modifier: Modifier = Modifier, snackbarHostState: SnackbarHostState) {
    val shoppingCart = mapOf(
        "Apple" to Triple("\uD83C\uDF4E", 0.99, 5),
        "Banana" to Triple("\uD83C\uDF4C", 0.59, 7),
        "Milk" to Triple("\uD83E\uDD5B", 3.49, 2),
        "Bread" to Triple("\uD83C\uDF5E", 2.99, 1),
        "Eggs" to Triple("\uD83E\uDD5A", 4.99, 1),
        "Chicken" to Triple("\uD83C\uDF57",8.99, 1),
        "Rice" to Triple("\uD83C\uDF5A", 5.99, 2)
    ) // THIS WAS GENERATED BY CHATGPT FOR SAMPLE DATA
    // Just a dictionary with all info of the orders we want to process

    var totalPrice: Double = 0.0

    Column (modifier=modifier.fillMaxSize()){
        for ((name, info) in shoppingCart) {
            val (emoji, price, quantity) = info
            totalPrice += (price * quantity) // calculates total as we iterate through the dict
            Item(Modifier.weight(1f), name, info)
        }
        Checkout(Modifier.weight(.5f) // Checkout button which includes total
            .align(alignment=Alignment.CenterHorizontally), totalPrice, snackbarHostState)

    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    ShoppingCartTheme {
//        Greeting("Android")
    }
}